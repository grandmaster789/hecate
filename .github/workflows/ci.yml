# based on https://github.com/ArthurSonzogni/FTXUI

name: ci
on:
  create:
    tags:
    - v*
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - main
      - develop
      - master

jobs:
  test:
    name: "Tests"
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: Linux GCC
          os: ubuntu-latest
          compiler: gcc
          gcov_executable: gcov

        - name: Linux Clang
          os: ubuntu-latest
          compiler: llvm
          gcov_executable: "llvm-cov gcov"

        - name: Macos Clang
          os: macos-latest
          compiler: llvm
          gcov_executable: "llvm-cov gcov"

        - name: Windows MSVC
          os: windows-latest
          compiler: cl

    runs-on: ${{ matrix.os }}
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v2

    - name: "Setup tooling"
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }} # should figure something else out for clang on windows
        cmake: true
        ninja: true
        clangtidy: true
        gcovr: "5.0"
        opencppcoverage: true

    # coverage should only be done with -O0, so don't include release builds
    - name: "Configure CMake"
      run: >
        cmake -S .
        -B ./build
        -DCMAKE_BUILD_TYPE:STRING=Debug ;

    - name: "Build"
      run: >
        cmake
        --build ./build
    
    - name: Unix test and coverage
      if: runner.os != 'Windows'
      working-directory: ./build
      run: >
        ctest -C Debug --rerun-failed --output-on-failure;
        gcovr
        -j ${{env.nproc}}
        --delete
        --root ../
        --exclude-unreachable-branches
        --exclude-throw-branches
        --sort-uncovered
        --print-summary
        --xml-pretty
        --xml
        coverage.xml
        .
        --gcov-executable '${{ matrix.gcov_executable }}';

    - name: Windows test and coverage
      if: runner.os == 'Windows'
      working-directory: ./build
      run: >
        OpenCppCoverage.exe
        --export_type cobertura:coverage.xml
        --cover_children
        --
        ctest -C Debug --rerun-failed --output-on-failure;

    - name: Publish to codecov
      uses: codecov/codecov-action@v2
      with:
        flags: ${{ runner.os }}
        name: ${{runner.os }}-coverage
        files: ./build/coverage.xml

  # when a 'v*' tag is committed, build and publish a release artifact
  release:
    needs: test
    if: ${{ github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') }}
    name: "Create release"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: "Release action"
      uses: softprops/action-gh-release@v2
      id: create_release
      with:
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package:
    name: "Build packages"
    needs: release
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          asset_path: build/hecate*linux*
        - os: macos-latest
          asset_path: build/hecate*darwin*
        - os: windows-latest
          asset_path: build/hecate*win64*
    runs-on: ${{ matrix.os }}
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install cmake"
      uses: lukka/get-cmake@latest

    - name: "Build packages"
      run: >
        mkdir build;
        cd build;
        cmake ..
        -DCMAKE_BUILD_TYPE=Release;
        cmake --build . --target package;
    - uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ matrix.asset_path }}
        overwrite: true

  documentation:
    needs: package
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "Install cmake"
      uses: lukka/get-cmake@latest

    - name: "Install emsdk"
      uses: mymindstorm/setup-emsdk@v7

    - name: "Install doxygen+graphviz"
      run: >
        sudo apt-get update;
        sudo apt-get install doxygen graphviz;

    - name: "Build documentation"
      run: >
        mkdir build;
        cd build;
        emcmake cmake ..;
        cmake --build . --target doc;
        rsync -amv --include='*/' --include='*.html' --include='*.js' --include='*.wasm' --exclude='*' examples doc/doxygen/html;

    - name: "Deploy"
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_toke: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/doc/doxygen/html/
        enable_jekyll: false
        allow_empty_commit: false
        force_orphan: true
        publish_branch: gh-pages